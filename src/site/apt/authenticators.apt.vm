#*
 * Copyright 2013 Michael Osipov
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *#

## $Id$

                            ----------------------
                                 Authenticators
                            ----------------------
                               Michael Osipov
                            ----------------------
                                 2013-08-03
                            ----------------------

#set($ellipsis = $esc.unicode('\u2026'))

Using and Choosing Authenticators

  Choose an authenticator to determine a user's identity. Usually, the {{{The_SPNEGO_Authenticator}<<<SpnegoAuthenticator>>>}}
  will do but during local development, you will find the {{{Using_an_Authenticator_During_Development}<<<CurrentWindowsIdentityAuthenticator>>>}}
  very handy.

* The SPNEGO Authenticator

  The {{{./apidocs/net/sf/michaelo/tomcat/authenticator/SpnegoAuthenticator.html}<<<SpnegoAuthenticator>>>}}
  challenges the client to perform {{{http://tools.ietf.org/html/rfc4178}SPNEGO}} authentication. In
  turn the server establishes a GSS context and validates the security token and responds with a
  proper message to the client.

    [Attention] Though SPNEGO is intended to negotiate a mechanism, the Oracle JVM currently supports
                Kerberos 5 only and not NTLM additionally due to its proprietary nature. Furthermore,
                it is {{{http://blogs.technet.com/b/authentication/archive/2006/04/07/ntlm-s-time-has-passed.aspx}not advised by Microsoft}}
                to rely on NTLM anymore.

  Open or create your app's <<<context.xml>>> and add:

+----------------------------
[$ellipsis]
<Context>
  <!-- Add this -->
  <Valve className="net.sf.michaelo.tomcat.authenticator.SpnegoAuthenticator"
    loginEntryName="a-login-entry" storeDelegatedCredential="true|false" />
</Context>
[$ellipsis]
+----------------------------

  Provide the login entry name from your <<<login.conf>>> configured for the machine account
  accepting GSS contexts with Kerberos.

  Additionally, you may instruct the authenticator to store the delegated credential of a user if
  you need to perform further operations on the user's behalf (impersonation). Default value is
  <<<false>>>. Keep in mind that Active Directory accounts have to be explicitly enabled for this.

  You have successfully configured the <<<SpnegoAuthenticator>>> in your webapp. It is now ready to use.

* Using an Authenticator During Development

  You have now examined the authenticator above and probably ask yourself: How do you use that
  on my local development machine? Well, Generally, you can't in Windows due to {{{http://stackoverflow.com/q/17705727/696632}this}}
  stupidity.

  Meet the savior {{{./apidocs/net/sf/michaelo/tomcat/authenticator/CurrentWindowsIdentityAuthenticator.html}<<<CurrentWindowsIdentityAuthenticator>>>}}.
  It will automatically obtain the GSS credential of the currently logged in domain user and auto-login
  you in the application. This is very handy when you are running your Tomcat from Eclipse. There is
  no hassle with any other authentication mechanism different to the one above.

+----------------------------
[$ellipsis]
<Context>
  <!-- Add this -->
  <Valve className="net.sf.michaelo.tomcat.authenticator.CurrentWindowsIdentityAuthenticator"
    loginEntryName="a-login-entry" />
</Context>
[$ellipsis]
+----------------------------

  Provide the login entry name from your <<<login.conf>>> configured for your user account initiating
  GSS contexts with Kerberos.

    [Warning] Do not use this in production. This has been development for the ease of development
              and testing purposes only.

  Now you have successfully configured the <<<CurrentWindowsIdentityAuthenticator>>> in your webapp.
  It is now ready to use.

The Next Step

  After you have properly configured an authenticator, go on to the {{{./realms.html}realms}}.