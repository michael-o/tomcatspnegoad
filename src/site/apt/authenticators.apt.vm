#*
 * Copyright 2013â€“2017 Michael Osipov
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *#

## $Id$

                            ----------------------
                                Authenticators
                            ----------------------
                                Michael Osipov
                            ----------------------
                                  2013-08-03
                            ----------------------

#set($ellipsis = $esc.unicode('\u2026'))

Choosing and Using Authenticators

  Choose an authenticator which will determine a user's identity. Usually, the {{{The_SPNEGO_Authenticator}<<<SpnegoAuthenticator>>>}}
  will do, but during local development you will find the {{{Using_an_Authenticator_During_Development}<<<CurrentWindowsIdentityAuthenticator>>>}}
  very handy.

* The SPNEGO Authenticator

  The {{{./apidocs/net/sf/michaelo/tomcat/authenticator/SpnegoAuthenticator.html}<<<SpnegoAuthenticator>>>}}
  challenges the client to perform {{{http://tools.ietf.org/html/rfc4559}SPNEGO}} authentication. In
  turn the server accepts a GSS context by validating an authentication token and responds with a
  proper token to the client.

    [Attention] Though SPNEGO is intended to negotiate a mechanism, the Oracle JVM currently supports
                Kerberos 5 only and not NTLM additionally due to its proprietary nature. Anyway, it
                is discouraged by Microsoft ({{{http://blogs.technet.com/b/authentication/archive/2006/04/07/ntlm-s-time-has-passed.aspx}1}}, {{{http://serverfault.com/a/384721/116898}2}})
                to rely on NTLM anymore.

  Open or create your app's <<<context.xml>>> and add:

+----------------------------
<Context>
[$ellipsis]
  <!-- Add this -->
  <Valve className="net.sf.michaelo.tomcat.authenticator.SpnegoAuthenticator"
    loginEntryName="a-login-entry" />
[$ellipsis]
</Context>
+----------------------------

  Provide the login entry name from your <<<login.conf>>> configured for the machine account
  capable of accepting GSS contexts with SPNEGO/Kerberos.

  You have successfully configured the <<<SpnegoAuthenticator>>> in your webapp. It is now ready to use.

* Using an Authenticator During Development

  After examining the authenticator above and probably ask yourself: How do I use that on my local
  development machine? {{{./apidocs/net/sf/michaelo/tomcat/authenticator/CurrentWindowsIdentityAuthenticator.html}<<<CurrentWindowsIdentityAuthenticator>>>}}
  to the rescue. It will automatically obtain the GSS credential of the currently logged in domain
  user and auto-login you in the application. This is very handy when you are running your Tomcat
  instance inside Eclipse.

  Open or create your app's <<<context.xml>>> and add:

+----------------------------

<Context>
[$ellipsis]
  <!-- Add this -->
  <Valve className="net.sf.michaelo.tomcat.authenticator.CurrentWindowsIdentityAuthenticator"
    loginEntryName="a-login-entry" />
[$ellipsis]
</Context>
+----------------------------

  Provide the login entry name from your <<<login.conf>>> configured for your user account capable
  of initiating GSS contexts with SPNEGO/Kerberos.

    [Warning] Do not use this in production. This has been created for the ease of development and
              testing purposes only.

  Now you have successfully configured the <<<CurrentWindowsIdentityAuthenticator>>> in your webapp.
  It is now ready to use.

The Next Step

  After you have properly configured an authenticator, go on to the {{{./realms.html}realm}}.
