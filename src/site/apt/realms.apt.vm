#*
 * Copyright 2013â€“2024 Michael Osipov
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *#

                            ----------------------
                                    Realms
                            ----------------------
                                Michael Osipov
                            ----------------------
                                  2013-08-04
                            ----------------------

#set($ellipsis = $esc.unicode('\u2026'))

Choosing and Using Realms

  After the authenticator has established a user's identity, it's time to retrieve it. Usually,
  the {{{Active_Directory_Realm}<<<ActiveDirectoryRealm>>>}} and {{{PAC_Data_Active_Directory_Realm}<<<PacDataActiveDirectoryRealm>>>}}
  will do, but for testing purposes you will find the {{{Using_a_Realm_for_Testing_Purposes}<<<UserDatabaseRealm>>>}}
  very handy.

    [Tip] I strongly recommend to try the {{{Using_a_Realm_for_Testing_Purposes}<<<UserDatabaseRealm>>>}}
          first, you'll see whether the authenticator works at all. If it does, go on with the
          productive realms.

* Active Directory Realm

  The {{{./tomcat90-authnz-spnego-ad/apidocs/net/sf/michaelo/tomcat/realm/ActiveDirectoryRealm.html}<<<ActiveDirectoryRealm>>>}}
  will query your Active Directory via LDAP for a user by the {{{./tomcat90-authnz-spnego-ad/apidocs/net/sf/michaelo/tomcat/realm/ActiveDirectoryRealm.html#on-usernames}string name type of the supplied username}}
  and retrieve all the necessary information, e.g., his/her security groups.

  It requires a two-step setup: First, you will need to configure a <<<DirContextSourceFactory>>>
  with the parameters of your Active Directory. Second, the realm itself pointing to that Active
  Directory.

** Configuring a Directory Context Source Factory

  Please read the documentation of the {{{https://michael-o.github.io/dirctxsrc/dircontextsourcefactory.html}<<<DirContextSourceFactory>>>}}
  on how to configure it in detail. Here is a minimal working configuration:

    [Tip] Never rely on hard-coded hostnames, use my {{{https://michael-o.github.io/activedirectory-dns-locator/}<<<ActiveDirectoryLdapDnsProvider>>>}}
          to auto-locate servers for Active Directory via DNS.

    []

+----------------------------
[$ellipsis]
  <!-- Add this -->
  <Resource name="my-active-directory" type="net.sf.michaelo.dirctxsrc.DirContextSource"
    factory="net.sf.michaelo.dirctxsrc.DirContextSourceFactory"
    urls="ldap://ad.example.com" auth="gssapi" loginEntryName="my-client" />
[$ellipsis]
+----------------------------

** Referral Handling

  In general, you should pick LDAP URLs which avoid any referral chasing because it amplifies
  execution in space and time. You are highly recommended using the Global Catalog (port 3268) only.
  More details on how this realm deals with referrals can be found in the {{{./tomcat90-authnz-spnego-ad/apidocs/net/sf/michaelo/tomcat/realm/ActiveDirectoryRealm.html#referral-handling}Javadoc}}.

** Configuring the Realm

  Now we need to wire that to the realm. Open or create your app's <<<context.xml>>> and add:

+----------------------------
<Context>
[$ellipsis]
  <!-- Add this -->
  <Realm className="net.sf.michaelo.tomcat.realm.ActiveDirectoryRealm"
    dirContextSourceName="my-active-directory" localDirContextSource="true|false" />
[$ellipsis]
</Context>
+----------------------------

  Provide the <<<dirContextSourceName>>> you have configured for the <<<DirContextSource>>> above and
  hint whether this directory context source has been configured
  {{{https://michael-o.github.io/dirctxsrc/dircontextsourcefactory.html#Resource_Declaration_Examples}locally or globally}}.
  Default value is <<<false>>>.

  You have successfully configured the <<<ActiveDirectoryRealm>>> in your webapp. It is now ready to use.

** Authenticated Principal

  After successful authentication and retrieval, this realm will create an <<<ActiveDirectoryPrincipal>>>
  with several attributes. Refer to the {{{./tomcat90-authnz-spnego-ad/apidocs/net/sf/michaelo/tomcat/realm/ActiveDirectoryPrincipal.html}Javadoc}}
  for details.

    [Important] If you intend to authenticate with the <<<SSLAuthenticator>>> your client certificates must contain
                a subject alternative name type 0 (<<<otherName>>>) with the type OID 1.3.6.1.4.1.311.20.2.3 (<<<msUPN>>>).

** Using Security Groups from Active Directory

  The <<<ActiveDirectoryRealm>>> will populate all roles as SID strings for the given principal by default.
  While it might not look convenient in the first place, it adds benefit when security groups are moved
  from/to other domains, the SID history is completely retained. I.e., your application will continue
  to work even with the old SID. If you would like to map SIDs to developer-friendly role names,
  checkout the {{{https://tomcat.apache.org/tomcat-9.0-doc/config/listeners.html#Properties_Role_Mapping_Listener_-_org.apache.catalina.core.PropertiesRoleMappingListener}<<<PropertiesRoleMappingListener>>>}}
  or use other role formats, but the SID see extended capabilities of this realm in the
  {{{./tomcat90-authnz-spnego-ad/apidocs/net/sf/michaelo/tomcat/realm/ActiveDirectoryRealm.html#configuration}Javadoc}}.

* PAC Data Active Directory Realm

  The {{{./tomcat90-authnz-spnego-ad/apidocs/net/sf/michaelo/tomcat/realm/PacDataActiveDirectoryRealm.html}<<<PacDataActiveDirectoryRealm>>>}}
  will process {{{https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-pac/166d8064-c863-41e1-9c23-edaaa5f36962}MS-PAC}}
  data from your Active Directory for a user and retrieve all the necessary information, e.g., his/her security groups.

  It requires a single-step setup.

    [Note] Unsure about this realm? Use the {{{./tomcat90-authnz-spnego-ad/apidocs/net/sf/michaelo/tomcat/realm/Krb5AuthzDataDumpingActiveDirectoryRealm.html}<<<Krb5AuthzDataDumpingActiveDirectoryRealm>>>}}
           (which wraps the <<<ActiveDirectoryRealm>>>) to collect authorization data and analyze it with the {{{./tomcat90-authnz-spnego-ad/apidocs/net/sf/michaelo/tomcat/pac/Krb5AuthzDataDumpPrinter.html}<<<Krb5AuthzDataDumpPrinter>>>}}.

** Configuring the Realm

  Open or create your app's <<<context.xml>>> and add:

+----------------------------
<Context>
[$ellipsis]
  <!-- Add this -->
  <Realm className="net.sf.michaelo.tomcat.realm.PacDataActiveDirectoryRealm"
    loginEntryName="a-login-entry" />
[$ellipsis]
</Context>
+----------------------------

  Provide the <<<loginEntryName>>> you have configured for the <<<SpnegoAuthenticator>>> before.

  You have successfully configured the <<<PacDataActiveDirectoryRealm>>> in your webapp. It is now ready to use.

** Authenticated Principal

  After successful authentication and retrieval, this realm will create an <<<ActiveDirectoryPrincipal>>>
  with several attributes. Refer to the {{{./tomcat90-authnz-spnego-ad/apidocs/net/sf/michaelo/tomcat/realm/ActiveDirectoryPrincipal.html}Javadoc}}
  for details.

** Using Security Groups from Active Directory

  The <<<PacDataActiveDirectoryRealm>>> will populate all roles as SID strings for the given principal by default.
  While it might not look convenient in the first place, it adds benefit when security groups are moved
  from/to other domains, the SID history is completely retained. I.e., your application will continue
  to work even with the old SID. If you would like to map SIDs to developer-friendly role names,
  checkout the {{{https://tomcat.apache.org/tomcat-9.0-doc/config/listeners.html#Properties_Role_Mapping_Listener_-_org.apache.catalina.core.PropertiesRoleMappingListener}<<<PropertiesRoleMappingListener>>>}}.

* Using a Realm for Testing Purposes

  In most cases you are not able to modify Active Directory entries easily (usually admins can), e.g.,
  adding and removing groups or their members. Therefore, you can use the {{{https://tomcat.apache.org/tomcat-9.0-doc/realm-howto.html#UserDatabaseRealm}<<<UserDatabaseRealm>>>}},
  fiddle quickly with users and roles to test your application.

  Follow the Tomcat documentation and configure a <<<tomcat-users.xml>>> file with the according resource
  declaration. Type in the user and group principals, but leave the passwords out.

  Open or create your app's <<<context.xml>>> and add:

+----------------------------
<Context>
[$ellipsis]
  <!-- Add this -->
  <Realm className="org.apache.catalina.realm.UserDatabaseRealm"
    resourceName="UserDatabase" stripRealmForGss="false" />
[$ellipsis]
</Context>
+----------------------------

  You have successfully configured the <<<UserDatabaseRealm>>> in your webapp. It is now ready to use.

* Alternative Realm Implementations

  If you are not using Active Directory as a user repository (e.g. database or another directory
  server) and can still make use of this library. Extend Tomcat's
  {{{https://tomcat.apache.org/tomcat-9.0-doc/api/org/apache/catalina/realm/RealmBase.html}<<<RealmBase>>>}}
  class and override any of these methods:

    * {{{https://tomcat.apache.org/tomcat-9.0-doc/api/org/apache/catalina/realm/RealmBase.html${esc.hash}getPrincipal(org.ietf.jgss.GSSName,org.ietf.jgss.GSSCredential)}<<<protected Principal getPrincipal(GSSName, GSSCredential)>>>}},

    * {{{https://tomcat.apache.org/tomcat-9.0-doc/api/org/apache/catalina/realm/RealmBase.html${esc.hash}getPrincipal(java.security.cert.X509Certificate)}<<<protected Principal getPrincipal(X509Certificate userCert)>>>}}.

Next Step

  You have freed your users from typing usernames and passwords over and over again. Go on and try
  your new {{{./sample-webapp.html}SSO setup}}.
