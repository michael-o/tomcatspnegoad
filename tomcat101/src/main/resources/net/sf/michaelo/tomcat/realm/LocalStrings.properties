activeDirectoryRealmBase.cannotGetRoles=Cannot get roles from principal ''{0}'' ({1})

activeDirectoryRealm.nameTypeNotSupported=Mapper ''{0}'' does not support name type ''{1}'' of user ''{2}''
activeDirectoryRealm.usernameSearch=Searching for username ''{0}'' in base ''{1}'' and attribute \
''{2}'' from mapper ''{3}''
activeDirectoryRealm.user.referralException=User search from mapper ''{0}'' wants us to continue with \
''{1}'' and follow a referral to ''{2}'', ignoring it
activeDirectoryRealm.userNotFoundWithMapper=User ''{0}'' from mapper ''{1}'' has not been found
activeDirectoryRealm.user.partialResultException=User search from mapper ''{0}'' cannot be completed \
and wants us to continue with ''{1}'', ignoring it
activeDirectoryRealm.userNotFound=User ''{0}'' has not been found with any mapper
activeDirectoryRealm.duplicateUser=User ''{0}'' has multiple entries
activeDirectoryRealm.duplicateUser.referralException=Multiple user check for ''{0}'' wants us to continue with \
''{1}'' and follow a referral to ''{2}'', ignoring it
activeDirectoryRealm.duplicateUser.partialResultException=Multiple user check for ''{0}'' cannot be completed \
and wants us to continue with ''{1}'', ignoring it
activeDirectoryRealm.userFoundButDisabled=Found user ''{0}'' but account is disabled
activeDirectoryRealm.userFoundButNotSupported=Found user ''{0}'' but account is neither a normal, nor a workstation trust one
activeDirectoryRealm.unparseableName=Search returned an unparseable absolute name ''{0}''
activeDirectoryRealm.userFound=Found user ''{0}'' with DN ''{1}'' and SID ''{2}''
activeDirectoryRealm.retrievingRoles=Retrieving {0} roles for user ''{1}''
activeDirectoryRealm.role.referralException=Role retrieval of ''{0}'' wants us to continue with \
''{1}'' and follow a referral to ''{2}'', ignoring it
activeDirectoryRealm.role.partialResultException=Role retrieval of ''{0}'' cannot be completed \
and wants us to continue with ''{1}'', ignoring it
activeDirectoryRealm.skippingDistributionRole = Skipping distribution role ''{0}'', role must be security-enabled
activeDirectoryRealm.foundRoleSidConverted=Successfully converted role (R)DN ''{0}'' to SID ''{1}''
activeDirectoryRealm.foundRoleSidConverted.withSidHistory=Successfully converted role (R)DN ''{0}'' to SID \
''{1}'' with SID history {2}
activeDirectoryRealm.foundRoleNameConverted=Successfully converted role (R)DN ''{0}'' to name ''{1}''
activeDirectoryRealm.foundRoleNameExConverted=Successfully converted role (R)DN ''{0}'' to name extended ''{1}''
activeDirectoryRealm.foundRolesCount=Found {0} roles for user ''{1}''
activeDirectoryRealm.foundRoles=Found following {0} roles for user ''{1}'': {2}
activeDirectoryRealm.principalSearchFailed.retry=Unable to perform principal search for user ''{0}'', retrying...
activeDirectoryRealm.principalSearchFailed=Unable to perform principal search for user ''{0}''
activeDirectoryRealm.referralFollow=Your directory context is configured to follow referrals, but \
Sun's JNDI/LDAP provider does not properly support Active Directory! See https://michael-o.github.io/tomcatspnegoad/referral-handling for details.
activeDirectoryRealm.environmentFailed=Failed to get the environment from directory context
activeDirectoryRealm.open=Opening new directory server connection
activeDirectoryRealm.opened=Opened new directory server connection ''{0}''
activeDirectoryRealm.close=Closing directory server connection ''{0}''
activeDirectoryRealm.closed=Closed directory server connection ''{0}''
activeDirectoryRealm.close.namingException=Exception closing directory server connection ''{0}''
activeDirectoryRealm.acquire=Acquiring directory server connection from pool
activeDirectoryRealm.acquired=Acquired directory server connection ''{0}'' from pool
activeDirectoryRealm.acquire.namingException=Exception acquiring directory server connection
activeDirectoryRealm.validate=Validating directory server connection ''{0}'' from pool
activeDirectoryRealm.validate.namingException=Exception validating directory server connection ''{0}''
activeDirectoryRealm.release=Releasing directory server connection ''{0}'' to pool
activeDirectoryRealm.reuse=Reusing existing directory server connection ''{0}''
activeDirectoryRealm.exceedMaxIdleTime=Directory server connection ''{0}'' from pool exceeds max idle time, closing it
activeDirectoryRealm.sanParsingFailed=Failed to parse subject alternative names from client certificate
activeDirectoryRealm.sanOtherNameParsingFailed=Failed to parse SAN:otherName from client certificate
activeDirectoryRealm.processingSanOtherName=Processing SAN:otherName ''{0}'' from client certificate ''{1}''
activeDirectoryRealm.msUpnExtracted=Successfully extracted MS UPN ''{0}'' from client certificate ''{1}''
activeDirectoryRealm.canonicalizingUser=Canonicalizing user from string name type ''{0}'' to ''{1}''
activeDirectoryRealm.canonicalizeUserFailed=Failed to canonicalize user ''{0}''
activeDirectoryRealm.userCanonicalized=Successfully canonicalized user to ''{0}''

krb5AuthzDataRealmBase.incompatibleSecurityContextType=Security context is not of type ''ExtendedGSSContext''
krb5AuthzDataRealmBase.inquireSecurityContextFailed=Failed to inquire KRB5_AUTHZ_DATA from security context
krb5AuthzDataRealmBase.noDataProvided=No KRB5_AUTHZ_DATA has been provided by the security context for user ''{0}''

krb5AuthzDataDumpingActiveDirectoryRealm.dumpingKrb5AuthzDataFailed=Failed to dump KRB5_AUTHZ_DATA for user ''{0}''

pacDataActiveDirectoryRealm.noDataProvided=No PAC data (AD-IF-RELEVANT/AD-WIN2K-PAC) has been provided by the security context for user ''{0}''
pacDataActiveDirectoryRealm.signatureVerificationFailed=Failed to verify PAC server signature
